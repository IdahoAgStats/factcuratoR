[{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"read-in-raw-variety-names","dir":"Articles","previous_headings":"","what":"Read in raw variety names","title":"Example of the cultivar matching process","text":"","code":"var <- read_csv(here::here(example_folder, \"example_cultivar_matching.csv\"),                  col_types = cols())  knitr::kable(var)"},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"create-unique-internal-id-for-names","dir":"Articles","previous_headings":"Cultivar matching","what":"Create unique internal id for names","title":"Example of the cultivar matching process","text":"Extraneous information variety name make matching process difficult - names won’t match exact matching less certain fuzzymatching functions able detect fuzzymatch. types information may stored variety name column removed includes: parental cross, crop type, agronomic treatments (“fill”, “sprayed”, etc). Remove extraneous information stored raw variety column duplicating name column removing extraneous information (can usually accomplished regex). column duplicated raw variety name retained match database matches back data. Additionally, blends, separated variety names matched separately. Many variety matching functions argument is_blends, can set TRUE match blends (See section matching blends). functions help standardize names according formatting blends: name1;name2 Note!  fuzzy matching stage started, important var_id doesn’t change cause problems matching matches correct names.","code":"names_raw <-    create_intid(var,                 variety,                 sep_aliases = \"\\\\(\",                 crop_type,                 nursery) %>% mutate(var_id = as.character(var_id))#,  #> Check variety names for possible duplicates[1] \"W512\" \"W512\"                #alias_col = alias)  knitr::kable(names_raw)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"do-exact-match","dir":"Articles","previous_headings":"Cultivar matching","what":"Do exact match","title":"Example of the cultivar matching process","text":"first step exact match cultivar names codebooks second step exact match names cv_rename.csv. cv_rename.csv contains misspellings.","code":"results_exactmatch <-    do_exactmatch(db_folder = codebook_folder,                 data_intid = names_raw,                 select_before = \"2021-11-22\",                 match_type = \"raw\") #> match: 5 nomatch: 10 check: 0 not_needed: 2  results_rename <-    do_exactmatch(db_folder = codebook_folder,                  data_intid = results_exactmatch$nomatch,                  match_type = \"raw\",                  rename_df = TRUE,                 rename_df_path = here::here(codebook_folder, \"cv_rename.csv\")) #> Rows: 147 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (4): correct_variety_name, wrong_name, program, crop_type #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> var_id and db_id do not exist. test_multmatch and test_aliasdup not run #>  #> match: 2 nomatch: 8 check: 0 not_needed: 0  knitr::kable(results_exactmatch[[\"match\"]]) knitr::kable(results_rename[[\"match\"]]) knitr::kable(results_rename[[\"nomatch\"]])"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"do-fuzzymatch","dir":"Articles","previous_headings":"Cultivar matching","what":"Do fuzzymatch","title":"Example of the cultivar matching process","text":"fuzzy matching procedure, wrapper fuzzyjoin::stringdist_join() returns best fuzzy matches using multiple distance methods (e.g. “lv”, “jw”, “lcs”). See ??stringdist information distance metrics. results filtered conditions: variable crop_type must match (e.g. “wheat” match “barley”) Numbers located end variety name alias must exact match one number present. number end variety name, trailing digit need match rest name. example “myvar1” still match “myvar”, “myvar123” match “myvar”. results find_fuzzymatch() written file fuzzymatch.csv directory provided user knitroutputfolder argument.","code":"output_fuzzymatch <-    find_fuzzymatch(results_rename$nomatch,                 intid_col = \"intid\",                 select_before = \"2021-05-26\",                 knitroutputfolder = knitroutputfolder,                 db_folder = codebook_folder) #> Writing out fuzzymatch.csv  knitr::kable(output_fuzzymatch)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"fill-out-the-fuzzymatch-csv","dir":"Articles","previous_headings":"Cultivar matching","what":"Fill out the fuzzymatch.csv","title":"Example of the cultivar matching process","text":"Move fuzzymatch.csv helper_files/ directory fill is_truematch column. (can append file ending “_aux” clearly differentiate .csv written output/ directory run .Rmd.) Fill is_truematch column “TRUE” fuzzymatch true match, otherwise fill “FALSE”. Sometimes match may clear, however, many matches need manually checked. steps : First, start Google search determine clear usages names (name raw data name database). suggest names refer different varieties true matches. Google search doesn’t help clarify whether name true match (quite likely, unfortunately), check possible matches collaborators. clear answer (answer), curator leave is_truematch blank subsequent steps remind curator follow possible matches.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"process-fuzzymatch_aux-csv-manual-matches","dir":"Articles","previous_headings":"Cultivar matching","what":"Process fuzzymatch_aux.csv manual matches","title":"Example of the cultivar matching process","text":"Read fuzzymatch_aux.csv manually filled Process file using process_fuzzymatch(), write 3 files working directory: fuzzy_check.csv, contains variety names still need manually checked whether fuzzy match true match. Update is_truematch helper_files/fuzzymatch_aux.csv file. may newly detected fuzzy matches successive runs .Rmd. may occur new names added codebook fuzzymatching function updated. Newly detected fuzzy matches need added helper_files/fuzzymatch_aux.csv file. new matches “new_fuzzymatch” source column. (“new_fuzzymatch;csv” source column means match run .Rmd (“new_fuzzymatch”) name also already present original fuzzymatch.csv (“csv”).) add_fuzzy_to_cv_rename.csv, contains variety names is_truematch “TRUE.” Manually add names cv_rename.csv. standardize_new_names.csv, contains variety names match need standardized added database. See next section full details.","code":"fuzzy_status <-    read_csv(here::here(auxiliary_files, \"fuzzymatch_status.csv\")) %>%   mutate(var_id = as.character(var_id)) #> Rows: 19 Columns: 16 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (11): intid, intid_db, variety, variety_db, type, type_db, crop_db, cro... #> dbl   (2): var_id, db_id #> lgl   (2): is_truematch, wrong_name #> date  (1): date_added_db #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  results_fuzzymatch <-    process_fuzzymatch(output_fuzzymatch_df = output_fuzzymatch,                       aux_fuzzy_status = fuzzy_status,                      knitroutputfolder = knitroutputfolder) #> Warning in process_fuzzymatch(output_fuzzymatch_df = output_fuzzymatch, : #> var_id has changed between the two inputs. Setting aux_fuzzy_status var_id to #> NA #> Varieties left to check: 0 #> Writing out fuzzy_check.csv.  Check these fuzzymatches. #>             Add source = new_fuzzymatches to the aux_fuzzy_status file. #> Writing add_fuzzy_to_cv_rename.csv  Add these names to the main cv_rename.csv #> Writing standardize_new_names.csv. #>           If a cultivar has more than one spelling or formatting, #>           standardize the name in the new_std_name column #> match: 2 nomatch: 5 check: 0 not_needed: 0"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"standardize-names-without-a-match","dir":"Articles","previous_headings":"Cultivar matching","what":"Standardize names without a match","title":"Example of the cultivar matching process","text":"Move standardize_new_names.csv helper_files/ directory (can append file ending “_aux” clearly differentiate .csv written output/ directory run .Rmd.) Go standardize names standardize_new_names_aux.csv editing names column new_std_name. function process_fuzzymatch() make initial guess populating new_std_name raw variety name. Note duplicate names:  especially important different spellings variety, names standardized file. example, “WA0061” “WA61” variety (spoiler: ), new_std_name entries. names standardized, processing names later create two different entries add database controlled vocabularies. Note names missed fuzzy matching:  names standardize_new_names_aux.csv match variety database, manually add names controlled_vocab/cv_rename.csv file. occurs name found fuzzy matching. fuzzy matching functions written return plausible matches trying minimize number total returns overwhelm user (). trade means potential matches may missed. Read process file using process_std_new_names(), write files /output folder: add_to_new_std_name.csv., contains names newly passed fuzzy matching stage name processing stage. entries file, add names helper_files/standardize_new_names_aux.csv standardize std_new_name column described . add_to_cv_rename.csv, names updated standardize_new_names_aux.csv won’t match exact_matching (.e. std_new_name changed default value. entries file, add names controlled_vocab/cv_rename.csv add_to_db.csv, contains new varieties. Add entries database. May need manually fill extra information crop alias","code":"results_new_names <-    process_std_new_names(     output_nomatch_df = results_fuzzymatch[[\"nomatch\"]],      auxiliary_files = auxiliary_files,       filename = \"standardize_new_names_aux.csv\",     knitroutputfolder = knitroutputfolder,     db_folder = codebook_folder) #> Joining with `by = join_by(var_id, variety, intid, type, crop_type)` #> Writing add_to_new_std_name.csv. Add these entries to #> auxiliary_files/standardize_new_names*.csv #> Joining with `by = join_by(comment)` #> Status: # A tibble: 3 × 4 comment n required req <chr> <int> <lgl> <int> 1 #> exists in both data and codebook 1 NA NA 2 not present in codebook: cultivar 10 #> NA NA 3 not present in data 10 TRUE 2 #> Adding columns: crop, date_added, alias, pedigree, year_released, usage, #> usda_pi_number, pvp, patent, comments"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"iterate-through-the-process","dir":"Articles","previous_headings":"Cultivar matching","what":"Iterate through the process","title":"Example of the cultivar matching process","text":"fuzzy_status file updated (, is_truematch filled ), re-run entire process clean R session process_fuzzymatch() process_std_new_names() update output files. goal iterate process outlined output files (fuzzy_check.csv, add_to_cv_rename.csv, add_to_new_std_name.csv, add_to_new_std_name.csv) empty. completed, variety names matched necessary information moved controlled vocabularies. Hooray! Make sure celebrate achievement!","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"collect-all-the-matches-from-each-step","dir":"Articles","previous_headings":"","what":"Collect all the matches from each step","title":"Example of the cultivar matching process","text":"names process_std_new_names() step added cv_rename file, match cv_rename step. functioncollect_final_matches() used collect matches stage matched.","code":"names_matches <-    collect_final_matches(list(exact = results_exactmatch,                              rename = results_rename,                              fuzzy = results_fuzzymatch),                          names_raw,                         knitroutputfolder = knitroutputfolder) #> Warning: Unknown columns: `intid_db_db`, `wrong_name`, `method`, `source` #> Warning: Unknown columns: `crop_db`, `method`, `source` #> Warning: Unknown columns: `intid_db_db` #> Warning:  5 cultivar(s) not yet matched to the database. #>                       The raw name is being returned #> Writing final_matches.csv  knitr::kable(names_matches)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"bind-matches-with-the-data","dir":"Articles","previous_headings":"","what":"Bind matches with the data","title":"Example of the cultivar matching process","text":"","code":"# do not run this code (it's here for example only) data_cv_names <- left_join(data, names_matches, by = \"variety\")"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"special-instructions-for-matching-blends","dir":"Articles","previous_headings":"","what":"Special instructions for matching blends","title":"Example of the cultivar matching process","text":"Curate blends separately non-blend variety names. example curating blends.","code":"blends <- read_csv(here::here(\"tests/testthat/test_match_variety_files\",                                \"example_blends.csv\"),                  col_types = cols())  knitr::kable(blends)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"create-unique-internal-id-for-names-1","dir":"Articles","previous_headings":"Special instructions for matching blends","what":"Create unique internal id for names","title":"Example of the cultivar matching process","text":"Note!  blends, set argument is_blends = TRUE variety matching functions.","code":"blends_raw <-    create_intid(blends,                 variety,                 # Although sep_alias is used to separate                 # an alias from the variety name, it can also be used here                 #to separate two names in a blend                sep_aliases = \"\\\\/\",                 crop_type,                is_blends = TRUE)   knitr::kable(blends_raw)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"do-exact-matching-step","dir":"Articles","previous_headings":"Special instructions for matching blends","what":"Do exact matching step","title":"Example of the cultivar matching process","text":"","code":"blends_exactmatch <-    do_exactmatch(db_folder = codebook_folder,                 data_intid = blends_raw,                 select_before = \"2021-11-22\",                 match_type = \"raw\",                 is_blends = TRUE) #> match: 3 nomatch: 3 check: 0 not_needed: 0  knitr::kable(blends_exactmatch[[\"match\"]]) knitr::kable(blends_exactmatch[[\"nomatch\"]]) blends_rename <-    do_exactmatch(db_folder = codebook_folder,                  data_intid = blends_exactmatch$nomatch,                  match_type = \"raw\",                  rename_df = TRUE,                  is_blends = TRUE,                 rename_df_path = here::here(codebook_folder, \"cv_rename.csv\")) #> Rows: 147 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (4): correct_variety_name, wrong_name, program, crop_type #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> match: 2 nomatch: 1 check: 0 not_needed: 0  knitr::kable(blends_rename[[\"match\"]]) knitr::kable(blends_rename[[\"nomatch\"]])"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"do-fuzzymatching-step","dir":"Articles","previous_headings":"Special instructions for matching blends","what":"Do fuzzymatching step","title":"Example of the cultivar matching process","text":"","code":"blends_fuzzymatch <-    find_fuzzymatch(blends_rename$nomatch,                 intid_col = \"intid\",                 select_before = \"2021-05-26\",                 knitroutputfolder = knitroutputfolder_blends,                 db_folder = codebook_folder) #> Writing out fuzzymatch.csv  knitr::kable(blends_fuzzymatch)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"read-in-and-process-fuzzymatches","dir":"Articles","previous_headings":"Special instructions for matching blends","what":"Read in and process fuzzymatches","title":"Example of the cultivar matching process","text":"","code":"blends_fuzzy_status <-    read_csv(here::here(auxiliary_files, \"fuzzymatch_blends_status.csv\")) %>%   mutate(var_id = as.character(var_id)) #> Rows: 1 Columns: 15 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (10): intid, intid_db, variety, variety_db, type, type_db, crop_db, cro... #> dbl   (2): var_id, db_id #> lgl   (2): is_truematch, wrong_name #> date  (1): date_added_db #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  blends_results_fuzzymatch <-    process_fuzzymatch(output_fuzzymatch_df = blends_fuzzymatch,                       aux_fuzzy_status = blends_fuzzy_status,                      knitroutputfolder = knitroutputfolder_blends) #> Varieties left to check: 1 #> Writing out fuzzy_check.csv.  Check these fuzzymatches. #>             Add source = new_fuzzymatches to the aux_fuzzy_status file. #> Writing add_fuzzy_to_cv_rename.csv  Add these names to the main cv_rename.csv #> Writing standardize_new_names.csv. #>           If a cultivar has more than one spelling or formatting, #>           standardize the name in the new_std_name column #> match: 0 nomatch: 0 check: 1 not_needed: 0"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/example_cultivar_matching.html","id":"collect-all-matches","dir":"Articles","previous_headings":"Special instructions for matching blends","what":"Collect all matches","title":"Example of the cultivar matching process","text":"","code":"blends_matches <-    collect_final_matches(list(exact = blends_exactmatch,                              rename = blends_rename,                              fuzzy = blends_results_fuzzymatch),                          blends_raw,                         knitroutputfolder = knitroutputfolder_blends,                         is_blends = TRUE) #> Warning: Unknown columns: `intid_db_db`, `wrong_name`, `method`, `source` #> Warning: Unknown columns: `crop_db`, `method`, `source` #> Warning: Unknown columns: `intid_db_db` #> Warning:  1 cultivar(s) not yet matched to the database. #>                       The raw name is being returned #> Writing final_matches.csv  knitr::kable(blends_matches)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_codebooks.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to the codebook structure","text":"purpose factcuratoR provide sets functions help standardize variety testing data curation variety testing data sets supporting WAVE project. goal WAVE program curation generate trial data trial metadata conform controlled vocabulary codebooks.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_codebooks.html","id":"trial-data-and-metadata","dir":"Articles","previous_headings":"","what":"Trial data and metadata","title":"Introduction to the codebook structure","text":"Trial data consists multiple plot entries per trial. includes data applicable plot-level, plot, variety, entry, traits like height, stand, moisture. Metadata consists one entry per trial. Metadata trial-level data, location, year, program, nursery.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_codebooks.html","id":"overview-of-codebook-structure","dir":"Articles","previous_headings":"","what":"Overview of codebook structure","title":"Introduction to the codebook structure","text":"First, load factcuratoR point main codebook (currently must named codebooks_all_db.csv validation functions) main codebook contains variable names required status trial data trial metadata. example, trial data contain columns trial, variety, entry, plot. trial metadata contain columns trial, nursery, year, location, etc. Note!  Traits collected trial, conceptually, make sense traits (test_weight height) contained main codebook associated trial_data. However, traits list expected get rather long, traits stored separate file called traits.csv. validating columns trial data, validation functions pull traits treats trait column trial data. Fig. 1 Example codebook structure file codebooks_all_db.csv also specifies whether variable must conform controlled vocabularies. , controlled vocabularies listed another codebook (e.g. allowed levels nursery trials_metadata defined nursery codebook). Let’s call ‘controlled vocabulary codebooks’ better distinguish ‘main codebook.’ Said another way, ‘main codebook’ hold column names ‘controlled vocabulary codebooks’ hold levels approved column contents. Just main codebook defines columns present trial_data trials_metadata,* codebooks_all_db.csv* also defines columns present controlled vocabulary codebooks. example (Fig. 1), codebooks_all_db.csv also information column names cultivar, nursery, location, crop_market_classes controlled vocabulary codebooks.","code":"library(factcuratoR)  rlang::check_installed(\"here\")  codebook_folder <- here::here(   \"tests/testthat/test_controlled_vocab\") create_dm(here::here(codebook_folder, \"codebooks_all_db.csv\"))"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_codebooks.html","id":"more-about-codebooks_all_db-csv","dir":"Articles","previous_headings":"","what":"More about codebooks_all_db.csv","title":"Introduction to the codebook structure","text":"codebooks_all_db.csv following (required) columns: book: name codebook variable: name column trial data, metadata, codebook categorical: type variable must conform controlled vocabularies (acceptable variables must specified values_defined_in value_range) string: uncontrolled string (validation function check ensure .character() == TRUE) integer (validation check %%1 == 0) continuous (acceptable range must provided value_range) date (validation check yyyy-mm-dd format) meaning: description variable, including units formatting requirements Entries separated semi-colons (e.g. “TRUE; FALSE” “1; 2; 3”) *Strings quoted (e.g. “value1”; “value2”) Range form: min max (e.g. 0 100) Separate range values using: | (e.g. 0 100 | -9) Careful! one accepted value, make sure separate semi-colon (e.g. 0 100 | -9;-99) Due Excel formatting issues, negative numbers prefaced ‘ without closing quotes (e.g. “’-180”) primary_key [??]","code":"codebooks_all <- readin.db(codebook_folder) #> This function name is being retained for backwards compatibility. #>           Please use readin_db()  knitr::kable(codebooks_all$codebooks_all_db.csv %>% filter(book == \"trial_data\")) knitr::kable(codebooks_all$codebooks_all_db.csv %>% filter(book == \"locations\"))"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_codebooks.html","id":"updating-the-controlled-vocabularies","dir":"Articles","previous_headings":"","what":"Updating the controlled vocabularies","title":"Introduction to the codebook structure","text":"updating codebook, codebooks_all_db.csv must updated reflect change. newly added variable column correspond new row codebooks_all_db.csv. changed variable column name correspond change variable name existing row. Care must taken variables may used several different codebooks. Renames consistent across codebooks.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to the validation functions","text":"purpose factcuratoR provide sets functions help standardize variety testing data curation variety testing data sets supporting WAVE project. goal WAVE program curation generate trial data trial metadata conform controlled vocabulary codebooks. codebooks specify variable required file (single column data frame, matrix, tibble, etc) accepted values variable. See Introduction codebooks vignette information structure formatting codebooks.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"overview-of-validation-functions","dir":"Articles","previous_headings":"","what":"Overview of validation functions","title":"Introduction to the validation functions","text":"validation functions check data conforms controlled vocabulary codebooks. functions validate: variable names. functions return tables curator check required variables present names standardized. variable values. functions return tables curator check values single variable match controlled vocabularies accepted value range. Finally, standardize_cols_by_cb() enables curators standardize files (select order columns) according standards established codebooks. First, load factcuratoR point main codebook must named codebooks_all_db.csv validation functions find .","code":"library(factcuratoR)  rlang::check_installed(\"here\")  codebook_folder <- here::here(   \"tests/testthat/test_controlled_vocab\")  knitroutputfolder <- here::here(\"inst/extdata/intro_validation\", \"output\")"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"create-some-test-data","dir":"Articles","previous_headings":"","what":"Create some test data","title":"Introduction to the validation functions","text":"","code":"test_data <- data.frame(location = c(\"Aberdeen\", \"Soda Springs\", NA, \"location_x\"),                         year = c(rep(2020, 3), NA),                         variety = c(\"variety_1\", \"AAC Wildfire\", \"\", NA),                         rep_temp = 1:4,                         sourcefile = \"test\")"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"validate-trial-data","dir":"Articles","previous_headings":"","what":"Validate trial data","title":"Introduction to the validation functions","text":"may easiest point cleaned version data new variable (e.g. df_validate ) calls validation functions don’t need updated every time cleaned version data.","code":"df_validate <- test_data"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"check-column-names","dir":"Articles","previous_headings":"Validate trial data","what":"Check column names","title":"Introduction to the validation functions","text":"function validate_colnames() check variable names codebook data. argument codebook_name = \"trial_data\" indicates codebook codebooks_all_db.csv used step. main goal validating column names get value required column row 3 zero. value zero indicates required columns present data completely filled . second row summary highlights columns codebook. required columns appear missing initial check, may present data set differing name. Often case many variables; collaborators unique name common variables. happens, creating file rename files en masse best solution. See facthelpeR functions help renaming columns. Determining variable captured existing controlled vocabulary human decision made based knowledge needed, consultation project participants. doubt, ask. required variable truly missing, need find data. Looking annual reports good starting point, may eventually request information collaborator find elsewhere. Sometimes, also new variables captured existing vocabulary. case, need decide variable added database. answer usually “yes”, usually discussion project participants needed decision. decision add new variable, add controlled vocabulary using correct formatting described Introduction codebooks vignette.","code":"colname_valid <- validate_colnames(df_validate,                                     codebook_name = \"trial_data\",                                     db_folder = codebook_folder) #> Joining with `by = join_by(comment)` #> Status: # A tibble: 3 × 4 comment n required req <chr> <int> <lgl> <int> 1 #> exists in both data and codebook 1 NA NA 2 not present in codebook: trial_data #> 4 NA NA 3 not present in data 27 TRUE 6"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"full-report-of-validating-column-names","dir":"Articles","previous_headings":"Validate trial data > Check column names","what":"Full report of validating column names","title":"Introduction to the validation functions","text":"","code":"knitr::kable(colname_valid)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"to-interact-with-the-variable-names-that-still-need-to-be-fixed","dir":"Articles","previous_headings":"Validate trial data > Check column names","what":"To interact with the variable names that still need to be fixed","title":"Introduction to the validation functions","text":"","code":"colname_valid_check <- colname_valid %>%    filter(comment == \"not present in codebook: trial_data\")  col_info <- find_col_info(df_validate,                         cols_check = colname_valid_check$colname_data,                         by_col = sourcefile)  knitr::kable(col_info)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"check-column-contents","dir":"Articles","previous_headings":"Validate trial data","what":"Check column contents","title":"Introduction to the validation functions","text":"function confront_data() wrapper around validate::confront() checks column contents match controlled vocabularies accepted value range. Note: argument blends = TRUE check blends variety column summary output validating column contents reports number columns fails (, column match controlled vocabularies within accepted range) NA values. column return error = TRUE column present data. goal validating column contents achieve zero fails columns required columns, achieve zero NA values (observation value). errors can fixed either fixing errors standardizing contents raw data adding new controlled vocabularies codebooks. example, name “variety_1” real variety name, added cultivar codebook.","code":"colcontent_valid <- confront_data(df_validate,                                    df_type = \"trial_data\",                                   db_folder = codebook_folder) #> Warning: Some issues left to resolve  #> # A tibble: 2 × 5 #>   required fails   nNA error warning #>   <lgl>    <int> <int> <int>   <int> #> 1 TRUE         1     1     6       0 #> 2 NA           0     0    21       0"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"full-report-of-validating-column-contents","dir":"Articles","previous_headings":"Validate trial data","what":"Full report of validating column contents","title":"Introduction to the validation functions","text":"","code":"colcontent_summary <- colcontent_valid[[\"summary\"]] knitr::kable(colcontent_summary)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"to-check-for-validation-fails-interactively","dir":"Articles","previous_headings":"Validate trial data > Full report of validating column contents","what":"To check for validation fails interactively","title":"Introduction to the validation functions","text":"","code":"var <- c(\"variety\") colcontent_violate <-    validate::violating(test_data, colcontent_valid[[2]][var]) %>%    relocate(matches(var))  knitr::kable(colcontent_violate)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"validate-metadata","dir":"Articles","previous_headings":"","what":"Validate metadata","title":"Introduction to the validation functions","text":"steps validating metadata validating trial data, except argument codebook_name = \"trials_metadata\".","code":"metadata_validate <- test_data"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"check-variable-names","dir":"Articles","previous_headings":"Validate metadata","what":"Check variable names","title":"Introduction to the validation functions","text":"","code":"metadata_colname_valid <-    validate_colnames(     metadata_validate,      \"trials_metadata\",     db_folder = codebook_folder) %>%     select(comment, colname_data, colname_codebook, required, col_num)  #> Joining with `by = join_by(comment)` #> Status: # A tibble: 3 × 4 comment n required req <chr> <int> <lgl> <int> 1 #> exists in both data and codebook 2 NA NA 2 not present in codebook: #> trials_metadata 3 NA NA 3 not present in data 25 TRUE 10  knitr::kable(metadata_colname_valid)"},{"path":"https://idahoagstats.github.io/factcuratoR/articles/intro_validation.html","id":"check-variable-values","dir":"Articles","previous_headings":"Validate metadata","what":"Check variable values","title":"Introduction to the validation functions","text":"","code":"metadata_colcontent_valid <- confront_data(metadata_validate,                                             df_type = \"trials_metadata\",                                            db_folder = codebook_folder) #> Warning: Some issues left to resolve  #> # A tibble: 2 × 5 #>   required fails   nNA error warning #>   <lgl>    <int> <int> <int>   <int> #> 1 FALSE        0     0    15       0 #> 2 TRUE         1     2    10       0  metadata_colcontent_summary <- metadata_colcontent_valid[[\"summary\"]]  knitr::kable(metadata_colcontent_summary) #Check for any fails interactively:  metadata_var <- c(\"location\") metadata_colcontent_violate <-    validate::violating(test_data, metadata_colcontent_valid[[2]][metadata_var]) %>%    relocate(matches(var))  knitr::kable(metadata_colcontent_violate)"},{"path":"https://idahoagstats.github.io/factcuratoR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacqueline Tay. Author, maintainer.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tay J (2024). factcuratoR: Functions curate FACT data. R package version 1.2.0, https://github.com/IdahoAgStats/factcuratoR, https://idahoagstats.github.io/factcuratoR/.","code":"@Manual{,   title = {factcuratoR: Functions to curate FACT data},   author = {Jacqueline Tay},   year = {2024},   note = {R package version 1.2.0, https://github.com/IdahoAgStats/factcuratoR},   url = {https://idahoagstats.github.io/factcuratoR/}, }"},{"path":"https://idahoagstats.github.io/factcuratoR/index.html","id":"factcurator-package","dir":"","previous_headings":"","what":"Curation Functions for Western Small Grains Data","title":"Curation Functions for Western Small Grains Data","text":"purpose factcuratoR provide sets functions help standardize variety testing data FACT program. goal FACT program curation generate: trial data (multiple entries per trial) trial metadata (one entry per trial) conform controlled vocabulary codebooks. factcuratoR functions fall different workflows: read-controlled vocabulary codebooks validate column names contents according codebooks curate cultivar names standardize/ write files according codebooks","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Curation Functions for Western Small Grains Data","text":"can install factcuratoR GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"IdahoAgStats/factcuratoR\")"},{"path":"https://idahoagstats.github.io/factcuratoR/index.html","id":"factcurator-functions-require-codebooks-that-are-standardized","dir":"","previous_headings":"","what":"factcuratoR functions require codebooks that are standardized","title":"Curation Functions for Western Small Grains Data","text":"See Introduction codebooks vignette","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://idahoagstats.github.io/factcuratoR/reference/assure_var_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Assure that var_id is the same for the current outputfuzzymatch_df and the aux_fuzzy_status that is read in — assure_var_id","title":"Assure that var_id is the same for the current outputfuzzymatch_df and the aux_fuzzy_status that is read in — assure_var_id","text":"Assure var_id current outputfuzzymatch_df aux_fuzzy_status read ","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/assure_var_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assure that var_id is the same for the current outputfuzzymatch_df and the aux_fuzzy_status that is read in — assure_var_id","text":"","code":"assure_var_id(output_fuzzymatch_df, aux_fuzzy_status)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/assure_var_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assure that var_id is the same for the current outputfuzzymatch_df and the aux_fuzzy_status that is read in — assure_var_id","text":"output_fuzzymatch_df data.frame newly generated fuzzymatches aux_fuzzy_status data.frame containing fuzzymatches is_truematch manually checked","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/bind_fuzzymatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind the status of fuzzymatches with the fuzzymatches created in this session so that the two stay in sync even if the fuzzymatch function is changed Note: this function may have to be updated to handle multiple auxiliary fuzzymatch files — bind_fuzzymatches","title":"Bind the status of fuzzymatches with the fuzzymatches created in this session so that the two stay in sync even if the fuzzymatch function is changed Note: this function may have to be updated to handle multiple auxiliary fuzzymatch files — bind_fuzzymatches","text":"Bind status fuzzymatches fuzzymatches created session two stay sync even fuzzymatch function changed Note: function may updated handle multiple auxiliary fuzzymatch files","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/bind_fuzzymatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind the status of fuzzymatches with the fuzzymatches created in this session so that the two stay in sync even if the fuzzymatch function is changed Note: this function may have to be updated to handle multiple auxiliary fuzzymatch files — bind_fuzzymatches","text":"","code":"bind_fuzzymatches(output_fuzzymatch_df, aux_fuzzy_status)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/bind_fuzzymatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind the status of fuzzymatches with the fuzzymatches created in this session so that the two stay in sync even if the fuzzymatch function is changed Note: this function may have to be updated to handle multiple auxiliary fuzzymatch files — bind_fuzzymatches","text":"output_fuzzymatch_df data.frame newly generated fuzzymatches aux_fuzzy_status data.frame containing fuzzymatches is_truematch manually checked","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/check.anymatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for any matches — check.anymatch","title":"Check for any matches — check.anymatch","text":"variety name match (exact fuzzymatch), check whether exact approved matches.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/check.anymatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for any matches — check.anymatch","text":"","code":"check.anymatch(df, group, checkfor = NULL, match_type)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/check.anymatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for any matches — check.anymatch","text":"df data.frame variety names matched database names group column name group search match (e.g. determine matches variety column, use: variety) checkfor column name check whether match (parameter used exact matching.  fuzzymatches, status match must manually entered) match_type string either 'db' 'raw', refers processing database entries (one entry per cultivar) raw entries may many alternate spellings one cultivar","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/check.matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that matches have one database match — check.matches","title":"Check that matches have one database match — check.matches","text":"Check matches one database match","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/check.matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that matches have one database match — check.matches","text":"","code":"check.matches(match_df)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/check.matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that matches have one database match — check.matches","text":"match_df data.frame variety names database matches (including volumns var_id db_id)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/clean_manualfuzzy.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the file of fuzzy matches with manual checks — clean_manualfuzzy","title":"Clean the file of fuzzy matches with manual checks — clean_manualfuzzy","text":"Fuzzy matching outputs file potential/fuzzy matches. user must go assign whether fuzzy match true match.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/clean_manualfuzzy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the file of fuzzy matches with manual checks — clean_manualfuzzy","text":"","code":"clean_manualfuzzy(match_type = \"raw\", df)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/clean_manualfuzzy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean the file of fuzzy matches with manual checks — clean_manualfuzzy","text":"match_type string either 'db' 'raw', refers processing database entries (one entry per cultivar) raw entries may many alternate spellings one cultivar df data.frame, can provided lieu curation_folder filename","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_final_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Module to collect all the matches from each stage of the variety matching process — collect_final_matches","title":"Module to collect all the matches from each stage of the variety matching process — collect_final_matches","text":"collect_final_matches() combines match output lists returns data frame containing raw names, matched clean names, stage matched. output file, 'final_matches.csv', written specified output location.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_final_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module to collect all the matches from each stage of the variety matching process — collect_final_matches","text":"","code":"collect_final_matches(   match_list,   names_raw,   knitroutputfolder,   csv_suffix = NULL,   is_blends = FALSE )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_final_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module to collect all the matches from each stage of the variety matching process — collect_final_matches","text":"match_list list output step variety matching process, .e., exact, rename, fuzzy. must enclosed list() call. names_raw data.frame names created create_intid() knitroutputfolder path output location csv_suffix Optional string denoting suffix .csv name. is_blends logical specifies whether varieties blends. Default FALSE","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_final_matches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Module to collect all the matches from each stage of the variety matching process — collect_final_matches","text":"Note: match found, returned match original raw name.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine all the matches from all of the cultivar matching steps — collect_matches","title":"Combine all the matches from all of the cultivar matching steps — collect_matches","text":"Combine matches cultivar matching steps","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine all the matches from all of the cultivar matching steps — collect_matches","text":"","code":"collect_matches(ls, ...)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/collect_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine all the matches from all of the cultivar matching steps — collect_matches","text":"ls list results created list2 cultivar matching steps ... number bare variables retained output matches","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/confront_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for create_rules() and validate::confront() — confront_data","title":"Wrapper for create_rules() and validate::confront() — confront_data","text":"functions summarises results fixes inability confront() detect NAs grepl. See create_rules() details.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/confront_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for create_rules() and validate::confront() — confront_data","text":"","code":"confront_data(df, df_type, db_folder, blends = FALSE, crop_types = NULL)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/confront_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for create_rules() and validate::confront() — confront_data","text":"df data.frame validated df_type string \"trial_data\" \"trials_metadata\" denoting type validation rules generate db_folder string path database controlled vocabulary folder blends logical denoting whether check blends variety column. default FALSE crop_types vector containing crop_types. used select appropriate traits codebook_name == \"trial_data\"","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data model object from the main codebook — create_dm","title":"Create a data model object from the main codebook — create_dm","text":"function creates data model codebook show relationship controlled variables (e.g. controlled vocabularies defined)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data model object from the main codebook — create_dm","text":"","code":"create_dm(codebook_main_path)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data model object from the main codebook — create_dm","text":"codebook_main_path string path main codebook","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_intid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create variety id (var_id) internal id (intid) for variety names — create_intid","title":"Create variety id (var_id) internal id (intid) for variety names — create_intid","text":"Create var_id intid variety names. var_id id (, row number) given unique variety name raw data. example, \"Variety 1/Alias 1\" given var_id number. say var_id 1. intid identifier name : lowercase spaces special characters","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_intid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create variety id (var_id) internal id (intid) for variety names — create_intid","text":"","code":"create_intid(   df,   variety_col_name,   sep_aliases = NULL,   ...,   alias_col = NULL,   is_blends = FALSE )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_intid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create variety id (var_id) internal id (intid) for variety names — create_intid","text":"df data.frame column containing variety names variety_col_name bare column name denoting column containing varieties sep_aliases regex corresponding characters used separate variety aliases ... Bare additional column name(s) include crop_type nursery, separated commas alias_col bare column name denoting column containing aliases is_blends logical specifies whether varieties blends. Default FALSE","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_intid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create variety id (var_id) internal id (intid) for variety names — create_intid","text":"function separates varieties aliases creates intid . resulting intids example : var_id | variety           | intid 1      | Variety1/Alias 1  | variety1 1      | Variety1/Alias 1  | alias1 Note: function handles aliases passed separate column aliases column variety name.  Aliases column must detectable regex provided sep_aliases. Also, currently, sep_aliases alias_col can provided.  (function written handle aliases variety column separate column.)","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_names_nomatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame of the names of varieties with no match — create_names_nomatch","title":"Create a data.frame of the names of varieties with no match — create_names_nomatch","text":"Create data.frame names varieties match","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_names_nomatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame of the names of varieties with no match — create_names_nomatch","text":"","code":"create_names_nomatch(df_nomatch, ...)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_names_nomatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame of the names of varieties with no match — create_names_nomatch","text":"df_nomatch data.frame varieties without cultivar matches database.  generally output function clean_manualfuzzy(). ... Extra columns select","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_new_db_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new database entries for cultivars that aren't in the controlled vocab (deprecated) — create_new_db_entries","title":"Create new database entries for cultivars that aren't in the controlled vocab (deprecated) — create_new_db_entries","text":"Need standardize crop type curation process function based create_newdbnames() create_newdbnames_db()","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_new_db_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new database entries for cultivars that aren't in the controlled vocab (deprecated) — create_new_db_entries","text":"","code":"create_new_db_entries(   auxiliary_files,   filename,   matches_temp_list,   data_intid,   match_type )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Create rules from the codebook using validate::validator() — create_rules","title":"Create rules from the codebook using validate::validator() — create_rules","text":"functions reads codebooks_all_db.csv generates rules information provided main codebook","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create rules from the codebook using validate::validator() — create_rules","text":"","code":"create_rules(df_type, db_folder, blends = FALSE, crop_types)  create.rules(df_type, db_folder)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create rules from the codebook using validate::validator() — create_rules","text":"df_type string \"trial_data\" \"trials_metadata\" denoting type validation rules generate db_folder string path database controlled vocabulary folder blends logical denoting whether blends stored variety column df_type = \"trial_data\" crop_types vector containing crop_types. used select appropriate traits codebook_name == \"trial_data\"","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/create_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create rules from the codebook using validate::validator() — create_rules","text":"Note: grepl returns FALSE tested object NA, NAs correctly detected grepl checks. Currently, validator package accept str_detect. workaround, date fields, extra check NAs implemented.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/deprecated_process_fuzzymatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Module to process fuzzymatches given an auxiliary file — deprecated_process_fuzzymatch","title":"Module to process fuzzymatches given an auxiliary file — deprecated_process_fuzzymatch","text":"Module process fuzzymatches given auxiliary file","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/deprecated_process_fuzzymatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module to process fuzzymatches given an auxiliary file — deprecated_process_fuzzymatch","text":"","code":"deprecated_process_fuzzymatch(output_fuzzymatch_df, aux_fuzzy_status)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/deprecated_process_fuzzymatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module to process fuzzymatches given an auxiliary file — deprecated_process_fuzzymatch","text":"output_fuzzymatch_df data.frame newly generated fuzzymatches aux_fuzzy_status data.frame containing fuzzymatches is_truematch manually checked","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/do_exactmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Do the steps in the exact match — do_exactmatch","title":"Do the steps in the exact match — do_exactmatch","text":"steps exact match","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/do_exactmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do the steps in the exact match — do_exactmatch","text":"","code":"do_exactmatch(   db_folder,   data_intid,   select_before = Sys.Date(),   select_crops = NULL,   match_type = \"raw\",   rename_df = FALSE,   is_blends = FALSE,   rename_df_path = NULL )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/do_exactmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do the steps in the exact match — do_exactmatch","text":"db_folder string path database controlled vocabulary folder data_intid data.frame created function create_intid(). data.frame mix crop_types, best pass column crop_type variety.  , function can ensure exact matches correct crop_type.  varieties one crop_type matched, select_crops argument can used select_before string format Ymd.  function returns cultivars added datebase specified date. select_crops regular expression crops separated |. Note regex filter crop column rather crop_type. example, entries wheat file crop Triticale, capture input select_crops = \"wheat|triticale\". match_type string, either \"raw\" \"db, \" denotes type matching procedure use.  matching raw variety names, use \"raw.\" matching database names, use \"db.\"  difference \"raw\" groups var_id looking one match per var_id.  method \"db\" groups intid looking match every entry provided. rename_df logical denoting whether check rename (misspelling) file Otherwise, matches pulled database list Currently, programs renames kept one file, may want consider putting renames different files collected together See get_cultivar_rename() is_blends logical specifies whether varieties blends. Default FALSE rename_df_path path file contains variety misspellings","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/extract_trail_digits.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the trailing digits from a column of type character and return the digits in a new column (digits are returned as characters) — extract_trail_digits","title":"Extract the trailing digits from a column of type character and return the digits in a new column (digits are returned as characters) — extract_trail_digits","text":"Extract trailing digits column type character return digits new column (digits returned characters)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/extract_trail_digits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the trailing digits from a column of type character and return the digits in a new column (digits are returned as characters) — extract_trail_digits","text":"","code":"extract_trail_digits(df, x, rm_single)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/extract_trail_digits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the trailing digits from a column of type character and return the digits in a new column (digits are returned as characters) — extract_trail_digits","text":"df data.frame x bare variable name column extract digits","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/factcuratoR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"factcuratoR: Functions to curate FACT data — factcuratoR-package","title":"factcuratoR: Functions to curate FACT data — factcuratoR-package","text":"package contains functions used workflow curate variety testing data. functions fall different workflows: read-controlled vocabulary, validate according codebooks, standardize cultivar names.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/factcuratoR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"factcuratoR: Functions to curate FACT data — factcuratoR-package","text":"Maintainer: Jacqueline Tay jacquelinejtay@gmail.com.com","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_col_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Find column information — find_col_info","title":"Find column information — find_col_info","text":"data.frame, loop columns provided (cols_check) summarise number non-NA entries groups contain non-NA entries (example want search trial, year, filename), return first non-NA entry example","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_col_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find column information — find_col_info","text":"","code":"find_col_info(df, cols_check, by_col)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_col_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find column information — find_col_info","text":"df data.frame summarise cols_check character vector column names check by_col bare variable summarise","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_entries_raw_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Find entries for the cultivar names that need to be checked — find_entries_raw_names","title":"Find entries for the cultivar names that need to be checked — find_entries_raw_names","text":"Summarises many times cultivar name shows raw data per year","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_entries_raw_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find entries for the cultivar names that need to be checked — find_entries_raw_names","text":"","code":"find_entries_raw_names(df_names, data_raw, join_by)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_entries_raw_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find entries for the cultivar names that need to be checked — find_entries_raw_names","text":"df_names data.frame contains column names check data_raw data.frame contains raw data (entries) join_by character string named character string passed '' parameter left_join()","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_fuzzymatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Find fuzzymatch for variety using stringdist using methods ","title":"Find fuzzymatch for variety using stringdist using methods ","text":"Note: function returns fuzzymatches stringdist.variety() places stricter requirements variety names end number greater one digit (e.g. ending number must exact match string numbers fuzzymatch).  requirement limit number close matches numeric variety names. condition, must careful generating var_id raw names remove trailing digits meaning (e.g. +25% refers seed increase cultivar name)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_fuzzymatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find fuzzymatch for variety using stringdist using methods ","text":"","code":"find_fuzzymatch(   var_noexactmatch,   data_name,   intid_col,   select_before = Sys.Date(),   select_crops = NULL,   knitroutputfolder = knitroutputfolder,   db_folder )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/find_fuzzymatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find fuzzymatch for variety using stringdist using methods ","text":"var_noexactmatch data.frame varieties without exact matches - data.frame contain column variety internal id (intid) data_name string denoting name dataset intid_col string denoting name internal id column used join raw data database select_before string format Ymd.  function returns cultivars added datebase specified date. select_crops regular expression crops separated |. Note regex filter crop column rather crop_type. example, entries wheat file crop Triticale, capture input select_crops = \"wheat|triticale\". knitroutputfolder folder path send output db_folder string path database controlled vocabulary folder","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_col_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column index for codebook variables in a list of data frames — get_col_index","title":"Get column index for codebook variables in a list of data frames — get_col_index","text":"function used get column index numbers selected columns. index vectors used set column styling Excel data templates, .e. highlighting required columns. Invalid codebook_names throw error.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_col_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column index for codebook variables in a list of data frames — get_col_index","text":"","code":"get_col_index(   datalist,   db_folder,   codebook_name,   required_only = TRUE,   crop_types = NULL )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_col_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column index for codebook variables in a list of data frames — get_col_index","text":"datalist list dataframes columns match codebook variables db_folder string path database controlled vocabulary folder codebook_name string denoting book name. Use list_db_books() see options required_only logical, FALSE returns columns; TRUE returns required columns crop_types vector containing crop_types. used select appropriate traits codebook_name == \"trial_data\"","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_col_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column index for codebook variables in a list of data frames — get_col_index","text":"Returns list integer vectors list names datalist.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_cultivar_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cultivar rename list to match. The cv_rename.csv is located in the controlled vocabularies. — get_cultivar_rename","title":"Get cultivar rename list to match. The cv_rename.csv is located in the controlled vocabularies. — get_cultivar_rename","text":"Get cultivar rename list match.  cv_rename.csv located controlled vocabularies.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_cultivar_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cultivar rename list to match. The cv_rename.csv is located in the controlled vocabularies. — get_cultivar_rename","text":"","code":"get_cultivar_rename(rename_df_path)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_cultivar_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cultivar rename list to match. The cv_rename.csv is located in the controlled vocabularies. — get_cultivar_rename","text":"rename_df_path path file contains variety misspellings","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_variety_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Return cultivar names along with unique internal identifier (no spaces or special characters) — get_variety_db","title":"Return cultivar names along with unique internal identifier (no spaces or special characters) — get_variety_db","text":"Filter cultivar list date cultivar added. default value selects current date. select_before = NULL, dates returned.  Recommended usage curation use current date, curation reproducible even cultivar list continuously updated.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_variety_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return cultivar names along with unique internal identifier (no spaces or special characters) — get_variety_db","text":"","code":"get_variety_db(   db_folder,   select_before = Sys.Date(),   select_crops = NULL,   for_matching = FALSE )  get.variety_db(   db_folder,   select_before = \"2021-01-01\",   select_crops = NULL,   for_matching = FALSE )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_variety_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return cultivar names along with unique internal identifier (no spaces or special characters) — get_variety_db","text":"db_folder string path database controlled vocabulary folder select_before string format Ymd.  function returns cultivars added datebase specified date. select_crops regular expression crops separated |. Note regex filter crop column rather crop_type. example, entries wheat file crop Triticale, capture input select_crops = \"wheat|triticale\". for_matching logical, whether result used matching. Default FALSE.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/get_variety_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return cultivar names along with unique internal identifier (no spaces or special characters) — get_variety_db","text":"Cultivar names stored crop_type, function return requested crop_types.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/is_string_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for overlap in strings This function takes a dataframe and compares two columns based on whether the strings overlap. TRUE is returned if there is an overlap in either direction (it doesn't matter which string is longer) — is_string_overlap","title":"Check for overlap in strings This function takes a dataframe and compares two columns based on whether the strings overlap. TRUE is returned if there is an overlap in either direction (it doesn't matter which string is longer) — is_string_overlap","text":"Check overlap strings function takes dataframe compares two columns based whether strings overlap.  TRUE returned overlap either direction (matter string longer)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/is_string_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for overlap in strings This function takes a dataframe and compares two columns based on whether the strings overlap. TRUE is returned if there is an overlap in either direction (it doesn't matter which string is longer) — is_string_overlap","text":"","code":"is_string_overlap(df, x1, x2)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/is_string_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for overlap in strings This function takes a dataframe and compares two columns based on whether the strings overlap. TRUE is returned if there is an overlap in either direction (it doesn't matter which string is longer) — is_string_overlap","text":"df data.frame x1 bare variable name column compare x2 bare variable name column compare","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/list_db_books.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names of the codebooks in the database — list_db_books","title":"List the names of the codebooks in the database — list_db_books","text":"List names codebooks database wrapper list_db_books maintain backwards compatibility","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/list_db_books.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names of the codebooks in the database — list_db_books","text":"","code":"list_db_books(db_folder)  list.db_books(db_folder)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/list_db_books.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the names of the codebooks in the database — list_db_books","text":"db_folder string path database controlled vocabulary folder","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/list_db_var.html","id":null,"dir":"Reference","previous_headings":"","what":"List the variables (column names) in a given database codebook — list_db_var","title":"List the variables (column names) in a given database codebook — list_db_var","text":"List variables (column names) given database codebook wrapper list_db_var maintain backwards compatibility","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/list_db_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the variables (column names) in a given database codebook — list_db_var","text":"","code":"list_db_var(db_folder, codebook_name, required_only = FALSE, crop_types)  list.db_var(db_folder, codebook_name, required_only = FALSE)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/list_db_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the variables (column names) in a given database codebook — list_db_var","text":"db_folder string path database controlled vocabulary folder codebook_name string denoting book name. Use list_db_books() see options required_only logical, FALSE returns columns; TRUE returns required columns crop_types vector containing crop_types. used select appropriate traits codebook_name == \"trial_data\"","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/match_newdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Match names with the new db entries (deprecated) — match_newdb","title":"Match names with the new db entries (deprecated) — match_newdb","text":"2022/01/11, function deprecated Note: important \"id_newvar\" column refers entries output created create_new_db_entries() auxiliary new cultivar controlled vocabulary names.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/match_newdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match names with the new db entries (deprecated) — match_newdb","text":"","code":"match_newdb(auxiliary_files, filename, names_newvarid, ...)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/match_newdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match names with the new db entries (deprecated) — match_newdb","text":"filename filename contains information created create_new_db_entries() checked filled collaborators names_newvarid data.frame variety names matches.  data.frame list element named 'names_newvarid' generated using create_newdbnames() ... Bare variables select new cultivar name","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_fuzzymatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Module to process fuzzymatches given an auxiliary file — process_fuzzymatch","title":"Module to process fuzzymatches given an auxiliary file — process_fuzzymatch","text":"function writes : fuzzy_check.csv (file fuzzy matches manually check) !Note: Rows source column \"new_fuzzymatch\" must manually pasted aux_fuzzy_status file Source column containing \"csv\" denotes possible fuzzymatch aux_fuzzy_status file blank (TRUE FALSE)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_fuzzymatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module to process fuzzymatches given an auxiliary file — process_fuzzymatch","text":"","code":"process_fuzzymatch(output_fuzzymatch_df, aux_fuzzy_status, knitroutputfolder)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_fuzzymatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module to process fuzzymatches given an auxiliary file — process_fuzzymatch","text":"output_fuzzymatch_df data.frame newly generated fuzzymatches aux_fuzzy_status data.frame containing fuzzymatches is_truematch manually checked knitroutputfolder path send output","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_fuzzymatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Module to process fuzzymatches given an auxiliary file — process_fuzzymatch","text":"add_fuzzy_to_cv_rename.csv (file paste main controlled_vocab/cv_rename.csv) names is_truematch = TRUE names manually added controlled_vocab/cv_rename.csv file caught using do_exactmatch() standardize_new_names.csv (file names standardize adding database.)","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_std_new_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Process standardized new names that were created from process_fuzzymatch() — process_std_new_names","title":"Process standardized new names that were created from process_fuzzymatch() — process_std_new_names","text":"user checks new names, can read processed. names checked names still need matches fuzzymatching (contained matches_temp_list) function: Writes csv message update auxiliary/standardize_new_names*.csv (New names standardize arise is_truematch status fuzzymatching stage moves 'check' 'TRUE' 'FALSE') Writes csv message add cultivar database Writes another csv message add cv_rename.csv file Note: function comes fuzzymatching, just like create_new_db_entries(). create_new_db_entries() deprecated used neely_curation/cultivar processes standardized new names way unnecessary (finds aliases). Also, function allows iterations matching process.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_std_new_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process standardized new names that were created from process_fuzzymatch() — process_std_new_names","text":"","code":"process_std_new_names(   output_nomatch_df,   auxiliary_files,   filename,   knitroutputfolder,   db_folder )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/process_std_new_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process standardized new names that were created from process_fuzzymatch() — process_std_new_names","text":"output_nomatch_df 'nomatch' data.frame created process_fuzzymatch auxiliary_files Path folder containing completed 'standardize_new_names' helper file filename Name 'standardize_new_names' helper file read knitroutputfolder Path output folder db_folder Path codebook folder","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in all codebooks and create a combined cultivar file — readin_db","title":"Read in all codebooks and create a combined cultivar file — readin_db","text":"Read controlled variable codebooks create combined cultivar file long format.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in all codebooks and create a combined cultivar file — readin_db","text":"","code":"readin_db(db_folder)  readin.db(db_folder)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in all codebooks and create a combined cultivar file — readin_db","text":"db_folder string path database controlled vocabulary folder","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in all codebooks and create a combined cultivar file — readin_db","text":"list data frames;  *.csv files controlled vocab folder. Additionally creates combined cultivar file, cultivar.csv, selecting crop, date_added, current variety/alias names crop_type. variety/alias names gathered single column, linked db_id number. type_db column tracks whether name alias true variety name, intid_db column contains cultivar name lowercase spaces punctuation removed, used matching.","code":""},{"path":[]},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in database control variables — readin_db_init","title":"Read in database control variables — readin_db_init","text":"Note: See read_delim need escape backslashes","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in database control variables — readin_db_init","text":"","code":"readin_db_init(db_folder)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/readin_db_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in database control variables — readin_db_init","text":"db_folder string path database controlled vocabulary folder","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/return.matchgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the variety names by whether they have a match, no match, or need to be checked — return.matchgroups","title":"Return the variety names by whether they have a match, no match, or need to be checked — return.matchgroups","text":"Return variety names.  function takes data.frame variety names potential database matches.  Given columns status, denotes whether variety database match, any_match, denotes whether variety least one match, function separates data.frame list 4 data.frames: varieties database matches, varieties without database matches, varieties still need checked manually (collaborator), duplicate rows varieties already matches","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/return.matchgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the variety names by whether they have a match, no match, or need to be checked — return.matchgroups","text":"","code":"return.matchgroups(df_any_match, is_blends = FALSE)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/return.matchgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the variety names by whether they have a match, no match, or need to be checked — return.matchgroups","text":"df_any_match data.frame processed check.anymatch() is_blends logical specifies whether varieties blends. Default FALSE","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/return_validate_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a message regarding the status of the validation — return_validate_message","title":"Return a message regarding the status of the validation — return_validate_message","text":"Return message regarding status validation","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/return_validate_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a message regarding the status of the validation — return_validate_message","text":"","code":"return_validate_message(confront_summary)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/return_validate_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a message regarding the status of the validation — return_validate_message","text":"confront_summary list object returned validate::confront()","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/rm.alias_dupmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove alias if there is a match with variety — rm.alias_dupmatch","title":"Remove alias if there is a match with variety — rm.alias_dupmatch","text":"variety listed raw data alias, names may match names database. function remove alias return listed variety name","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/rm.alias_dupmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove alias if there is a match with variety — rm.alias_dupmatch","text":"","code":"rm.alias_dupmatch(match_df)"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/rm.alias_dupmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove alias if there is a match with variety — rm.alias_dupmatch","text":"match_df data.frame contains var_id, db_id, type_db (\"alias\" \"variety\")","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/standardize_cols_by_cb.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize the columns in the order specified by the codebook — standardize_cols_by_cb","title":"Standardize the columns in the order specified by the codebook — standardize_cols_by_cb","text":"Contains options add missing columns remove unnecessary columns ordering follows column order specified codebook extra columns come , alphabetical order.","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/standardize_cols_by_cb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize the columns in the order specified by the codebook — standardize_cols_by_cb","text":"","code":"standardize_cols_by_cb(   df,   codebook_name,   add_missing_cols,   required_only,   codebook_cols_only,   db_folder,   new_col_fill = \"\",   cols_keep = NULL )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/standardize_cols_by_cb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize the columns in the order specified by the codebook — standardize_cols_by_cb","text":"df data.frame column names verify codebook names e.g. \"trial_data\", \"trials_metadata\" codebook_name string matches book name codebooks_all_db.csv add_missing_cols logical denoting whether add missing columns required_only logical denoting whether add required columns. parameter called add_missing_cols = TRUE. Note: option refers missing columns optional columns exist df, columns retained. codebook_cols_only logical denoting whether remove columns specified codebook db_folder string path database controlled vocabulary folder new_col_fill value used fill newly created columns cols_keep vector containing names columns keep (useful argument use codebook_cols_only = TRUE, user wants retain columns codebook)","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/stringdist.variety.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuzzymatch varieties using stringdist_join — stringdist.variety","title":"Fuzzymatch varieties using stringdist_join — stringdist.variety","text":"Fuzzymatch varieties raw data database using internal id. function uses stringdist_join returns closest match (smallest distance) enough flexibility without returning many fuzzy matches, function returns closest match measured 2 different ways: select best_n varieties smallest distance, select best_n varieties smallest scaled distance select best_n varieties smallest scaled distance, irrespective raw distance See effect different selection methods test_match_variety_fns.R","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/stringdist.variety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuzzymatch varieties using stringdist_join — stringdist.variety","text":"","code":"stringdist.variety(   raw_data,   database,   intid_col = \"name\",   best_n,   method_stringdist )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/stringdist.variety.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuzzymatch varieties using stringdist_join — stringdist.variety","text":"raw_data data.frame database data.frame intid_col string denoting name internal id column used join raw data database best_n numeric denoting number best matches select suffix string denoting name raw data method string corresponding string metric defined stringdist e.g. \"lw\", \"jw\"","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/validate_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate column names against codebook — validate_colnames","title":"Validate column names against codebook — validate_colnames","text":"Validate column names codebook","code":""},{"path":"https://idahoagstats.github.io/factcuratoR/reference/validate_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate column names against codebook — validate_colnames","text":"","code":"validate_colnames(   df,   codebook_name,   db_folder,   crop_types = NULL,   cb_name_remove = NULL )"},{"path":"https://idahoagstats.github.io/factcuratoR/reference/validate_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate column names against codebook — validate_colnames","text":"df data.frame column names verify codebook names e.g. \"trial_data\", \"trials_metadata\" codebook_name string denoting book name. Use list_db_books() see options db_folder string path database controlled vocabulary folder crop_types vector containing crop_types. used select appropriate traits codebook_name == \"trial_data\" cb_name_remove string denoting name codebook remove data (df) example, testing \"trial_data\", remove names df correspond \"trials_metadata\"","code":""},{"path":[]}]
